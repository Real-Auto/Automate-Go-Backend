// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Auth0User auth0 user
//
// swagger:model Auth0User
type Auth0User struct {

	// client Id
	ClientID string `json:"client_id,omitempty"`

	// connection
	Connection string `json:"connection,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// family name
	FamilyName string `json:"family_name,omitempty"`

	// given name
	GivenName string `json:"given_name,omitempty"`

	// ID
	ID string `json:"_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// tenant
	Tenant string `json:"tenant,omitempty"`

	// user metadata
	UserMetadata *UserMetaData `json:"user_metadata,omitempty"`
}

// Validate validates this auth0 user
func (m *Auth0User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Auth0User) validateUserMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.UserMetadata) { // not required
		return nil
	}

	if m.UserMetadata != nil {
		if err := m.UserMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auth0 user based on the context it is used
func (m *Auth0User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Auth0User) contextValidateUserMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.UserMetadata != nil {
		if err := m.UserMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Auth0User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Auth0User) UnmarshalBinary(b []byte) error {
	var res Auth0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
